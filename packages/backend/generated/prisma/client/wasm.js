
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  channelId: 'channelId',
  serverId: 'serverId',
  creatorDiscordId: 'creatorDiscordId',
  createdTime: 'createdTime',
  updatedTime: 'updatedTime'
};

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  alias: 'alias',
  discordId: 'discordId',
  serverId: 'serverId',
  creatorDiscordId: 'creatorDiscordId',
  createdTime: 'createdTime',
  updatedTime: 'updatedTime'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  alias: 'alias',
  puuid: 'puuid',
  region: 'region',
  playerId: 'playerId',
  lastProcessedMatchId: 'lastProcessedMatchId',
  lastMatchTime: 'lastMatchTime',
  serverId: 'serverId',
  creatorDiscordId: 'creatorDiscordId',
  createdTime: 'createdTime',
  updatedTime: 'updatedTime'
};

exports.Prisma.CompetitionScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  ownerId: 'ownerId',
  title: 'title',
  description: 'description',
  channelId: 'channelId',
  isCancelled: 'isCancelled',
  visibility: 'visibility',
  criteriaType: 'criteriaType',
  criteriaConfig: 'criteriaConfig',
  maxParticipants: 'maxParticipants',
  startDate: 'startDate',
  endDate: 'endDate',
  seasonId: 'seasonId',
  creatorDiscordId: 'creatorDiscordId',
  createdTime: 'createdTime',
  updatedTime: 'updatedTime'
};

exports.Prisma.CompetitionParticipantScalarFieldEnum = {
  id: 'id',
  competitionId: 'competitionId',
  playerId: 'playerId',
  status: 'status',
  invitedBy: 'invitedBy',
  invitedAt: 'invitedAt',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt'
};

exports.Prisma.CompetitionSnapshotScalarFieldEnum = {
  id: 'id',
  competitionId: 'competitionId',
  playerId: 'playerId',
  snapshotType: 'snapshotType',
  snapshotData: 'snapshotData',
  snapshotTime: 'snapshotTime'
};

exports.Prisma.ServerPermissionScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  discordUserId: 'discordUserId',
  permission: 'permission',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt'
};

exports.Prisma.GuildPermissionErrorScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  channelId: 'channelId',
  errorType: 'errorType',
  errorReason: 'errorReason',
  firstOccurrence: 'firstOccurrence',
  lastOccurrence: 'lastOccurrence',
  consecutiveErrorCount: 'consecutiveErrorCount',
  lastSuccessfulSend: 'lastSuccessfulSend',
  ownerNotified: 'ownerNotified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Subscription: 'Subscription',
  Player: 'Player',
  Account: 'Account',
  Competition: 'Competition',
  CompetitionParticipant: 'CompetitionParticipant',
  CompetitionSnapshot: 'CompetitionSnapshot',
  ServerPermission: 'ServerPermission',
  GuildPermissionError: 'GuildPermissionError'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/workspaces/scout-for-lol/packages/backend/generated/prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/workspaces/scout-for-lol/packages/backend/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma/client\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Subscription {\n  id        Int    @id @default(autoincrement())\n  playerId  Int\n  channelId String\n  player    Player @relation(fields: [playerId], references: [id])\n\n  // metadata\n  serverId         String\n  creatorDiscordId String\n  createdTime      DateTime\n  updatedTime      DateTime\n\n  @@unique([serverId, playerId, channelId])\n}\n\nmodel Player {\n  id                      Int                      @id @default(autoincrement())\n  alias                   String\n  discordId               String?\n  accounts                Account[]\n  subscriptions           Subscription[]\n  competitionParticipants CompetitionParticipant[]\n  competitionSnapshots    CompetitionSnapshot[]\n\n  // metadata\n  serverId         String\n  creatorDiscordId String\n  createdTime      DateTime\n  updatedTime      DateTime\n\n  @@unique([serverId, alias])\n}\n\nmodel Account {\n  id       Int    @id @default(autoincrement())\n  alias    String\n  // TODO: store riot ID for the sake of easier understanding\n  puuid    String\n  region   String\n  playerId Int\n  player   Player @relation(fields: [playerId], references: [id])\n\n  // Match processing tracking\n  lastProcessedMatchId String? // Track last match we've processed to avoid duplicates\n  lastMatchTime        DateTime? // Timestamp of the last match this player was in (for dynamic polling)\n\n  // metadata\n  serverId         String\n  creatorDiscordId String\n  createdTime      DateTime\n  updatedTime      DateTime\n\n  @@unique([serverId, puuid])\n}\n\nmodel Competition {\n  id              Int     @id @default(autoincrement())\n  serverId        String\n  ownerId         String // Discord user ID\n  title           String\n  description     String\n  channelId       String\n  isCancelled     Boolean @default(false)\n  visibility      String // OPEN, INVITE_ONLY, SERVER_WIDE\n  criteriaType    String // Enum stored as string\n  criteriaConfig  String // JSON stored as string\n  maxParticipants Int     @default(50)\n\n  // Time configuration (XOR: either fixed dates OR season)\n  startDate DateTime?\n  endDate   DateTime?\n  seasonId  String?\n\n  // Relations\n  participants CompetitionParticipant[]\n  snapshots    CompetitionSnapshot[]\n\n  // Metadata\n  creatorDiscordId String\n  createdTime      DateTime\n  updatedTime      DateTime\n\n  // Note: We do NOT have a unique constraint on [serverId, ownerId]\n  // This allows users to create multiple competitions over time\n  // The \"one active competition per owner\" rule is enforced in application logic\n  @@index([serverId, isCancelled])\n  @@index([serverId, ownerId, isCancelled])\n}\n\nmodel CompetitionParticipant {\n  id            Int       @id @default(autoincrement())\n  competitionId Int\n  playerId      Int\n  status        String // INVITED, JOINED, LEFT\n  invitedBy     String? // Discord user ID (nullable)\n  invitedAt     DateTime? // When invited (nullable - null if joined directly)\n  joinedAt      DateTime? // When joined (nullable - null if only invited)\n  leftAt        DateTime? // When left (nullable - null if still participating)\n\n  // Relations\n  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)\n  player      Player      @relation(fields: [playerId], references: [id])\n\n  @@unique([competitionId, playerId])\n  @@index([competitionId, status])\n}\n\nmodel CompetitionSnapshot {\n  id            Int      @id @default(autoincrement())\n  competitionId Int\n  playerId      Int\n  snapshotType  String // START, END\n  snapshotData  String // JSON stored as string\n  snapshotTime  DateTime\n\n  // Relations\n  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)\n  player      Player      @relation(fields: [playerId], references: [id])\n\n  @@unique([competitionId, playerId, snapshotType])\n}\n\nmodel ServerPermission {\n  id            Int      @id @default(autoincrement())\n  serverId      String\n  discordUserId String\n  permission    String // CREATE_COMPETITION (can add more later)\n  grantedBy     String // Discord user ID\n  grantedAt     DateTime\n\n  @@unique([serverId, discordUserId, permission])\n}\n\nmodel GuildPermissionError {\n  id                    Int       @id @default(autoincrement())\n  serverId              String\n  channelId             String\n  errorType             String // Type of permission error\n  errorReason           String? // Detailed reason\n  firstOccurrence       DateTime // When this error first occurred\n  lastOccurrence        DateTime // Most recent occurrence\n  consecutiveErrorCount Int       @default(1) // Number of consecutive errors\n  lastSuccessfulSend    DateTime? // Last time a message was successfully sent to this server\n  ownerNotified         Boolean   @default(false) // Whether owner was notified about abandonment\n  createdAt             DateTime  @default(now())\n  updatedAt             DateTime  @updatedAt\n\n  @@unique([serverId, channelId])\n  @@index([serverId, consecutiveErrorCount])\n  @@index([lastOccurrence])\n}\n",
  "inlineSchemaHash": "8bfbd5a219cbb49714656ef1fb732c5e5977201ed7f95129c551dd469b6c1e4b",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Subscription\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"playerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"channelId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"player\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"PlayerToSubscription\"},{\"name\":\"serverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"creatorDiscordId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Player\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"alias\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"discordId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToPlayer\"},{\"name\":\"subscriptions\",\"kind\":\"object\",\"type\":\"Subscription\",\"relationName\":\"PlayerToSubscription\"},{\"name\":\"competitionParticipants\",\"kind\":\"object\",\"type\":\"CompetitionParticipant\",\"relationName\":\"CompetitionParticipantToPlayer\"},{\"name\":\"competitionSnapshots\",\"kind\":\"object\",\"type\":\"CompetitionSnapshot\",\"relationName\":\"CompetitionSnapshotToPlayer\"},{\"name\":\"serverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"creatorDiscordId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"alias\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"puuid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"region\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"playerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"player\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"AccountToPlayer\"},{\"name\":\"lastProcessedMatchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastMatchTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"serverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"creatorDiscordId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Competition\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"serverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"channelId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isCancelled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"visibility\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"criteriaType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"criteriaConfig\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"maxParticipants\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"seasonId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"participants\",\"kind\":\"object\",\"type\":\"CompetitionParticipant\",\"relationName\":\"CompetitionToCompetitionParticipant\"},{\"name\":\"snapshots\",\"kind\":\"object\",\"type\":\"CompetitionSnapshot\",\"relationName\":\"CompetitionToCompetitionSnapshot\"},{\"name\":\"creatorDiscordId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CompetitionParticipant\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"competitionId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"playerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"invitedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"invitedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"leftAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"competition\",\"kind\":\"object\",\"type\":\"Competition\",\"relationName\":\"CompetitionToCompetitionParticipant\"},{\"name\":\"player\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"CompetitionParticipantToPlayer\"}],\"dbName\":null},\"CompetitionSnapshot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"competitionId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"playerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"snapshotType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"snapshotData\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"snapshotTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"competition\",\"kind\":\"object\",\"type\":\"Competition\",\"relationName\":\"CompetitionToCompetitionSnapshot\"},{\"name\":\"player\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"CompetitionSnapshotToPlayer\"}],\"dbName\":null},\"ServerPermission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"serverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"discordUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"permission\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grantedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grantedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"GuildPermissionError\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"serverId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"channelId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"errorType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"errorReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstOccurrence\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastOccurrence\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"consecutiveErrorCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastSuccessfulSend\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ownerNotified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

