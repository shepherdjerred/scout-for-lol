/* esm.sh - dotenv@16.5.0 */
import __Process$ from "node:process";
import { Buffer as __Buffer$ } from "node:buffer";
import*as __0$ from"node:fs";import*as __1$ from"node:path";import*as __2$ from"node:os";import*as __3$ from"node:crypto";import __4$ from"dotenv@16.5.0/package.json?module";var require=n=>{const e=m=>typeof m.default<"u"?m.default:m,c=m=>Object.assign({__esModule:true},m);switch(n){case"node:fs":return e(__0$);case"node:path":return e(__1$);case"node:os":return e(__2$);case"node:crypto":return e(__3$);case"dotenv/package.json":return e(__4$);default:console.error('module "'+n+'" not found');return null;}};
var T=Object.create;var _=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var p=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(r,t)=>(typeof require<"u"?require:r)[t]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});var A=(e,r)=>()=>(r||e((r={exports:{}}).exports,r),r.exports);var $=(e,r,t,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let c of O(r))!b.call(e,c)&&c!==t&&_(e,c,{get:()=>r[c],enumerable:!(o=I(r,c))||o.enumerable});return e};var x=(e,r,t)=>(t=e!=null?T(w(e)):{},$(r||!e||!e.__esModule?_(t,"default",{value:e,enumerable:!0}):t,e));var m=A((W,i)=>{var h=p("node:fs"),v=p("node:path"),K=p("node:os"),Y=p("node:crypto"),k=p("dotenv/package.json"),y=k.version,L=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function R(e){let r={},t=e.toString();t=t.replace(/\r\n?/mg,`
`);let o;for(;(o=L.exec(t))!=null;){let c=o[1],n=o[2]||"";n=n.trim();let a=n[0];n=n.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),a==='"'&&(n=n.replace(/\\n/g,`
`),n=n.replace(/\\r/g,"\r")),r[c]=n}return r}function U(e){let r=V(e),t=l.configDotenv({path:r});if(!t.parsed){let a=new Error(`MISSING_DATA: Cannot parse ${r} for an unknown reason`);throw a.code="MISSING_DATA",a}let o=N(e).split(","),c=o.length,n;for(let a=0;a<c;a++)try{let s=o[a].trim(),u=S(t,s);n=l.decrypt(u.ciphertext,u.key);break}catch(s){if(a+1>=c)throw s}return l.parse(n)}function P(e){console.log(`[dotenv@${y}][WARN] ${e}`)}function E(e){console.log(`[dotenv@${y}][DEBUG] ${e}`)}function N(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:__Process$.env.DOTENV_KEY&&__Process$.env.DOTENV_KEY.length>0?__Process$.env.DOTENV_KEY:""}function S(e,r){let t;try{t=new URL(r)}catch(s){if(s.code==="ERR_INVALID_URL"){let u=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw u.code="INVALID_DOTENV_KEY",u}throw s}let o=t.password;if(!o){let s=new Error("INVALID_DOTENV_KEY: Missing key part");throw s.code="INVALID_DOTENV_KEY",s}let c=t.searchParams.get("environment");if(!c){let s=new Error("INVALID_DOTENV_KEY: Missing environment part");throw s.code="INVALID_DOTENV_KEY",s}let n=`DOTENV_VAULT_${c.toUpperCase()}`,a=e.parsed[n];if(!a){let s=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${n} in your .env.vault file.`);throw s.code="NOT_FOUND_DOTENV_ENVIRONMENT",s}return{ciphertext:a,key:o}}function V(e){let r=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(let t of e.path)h.existsSync(t)&&(r=t.endsWith(".vault")?t:`${t}.vault`);else r=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else r=v.resolve(__Process$.cwd(),".env.vault");return h.existsSync(r)?r:null}function D(e){return e[0]==="~"?v.join(K.homedir(),e.slice(1)):e}function B(e){!!(e&&e.debug)&&E("Loading env from encrypted .env.vault");let t=l._parseVault(e),o=__Process$.env;return e&&e.processEnv!=null&&(o=e.processEnv),l.populate(o,t,e),{parsed:t}}function F(e){let r=v.resolve(__Process$.cwd(),".env"),t="utf8",o=!!(e&&e.debug);e&&e.encoding?t=e.encoding:o&&E("No encoding is specified. UTF-8 is used by default");let c=[r];if(e&&e.path)if(!Array.isArray(e.path))c=[D(e.path)];else{c=[];for(let u of e.path)c.push(D(u))}let n,a={};for(let u of c)try{let f=l.parse(h.readFileSync(u,{encoding:t}));l.populate(a,f,e)}catch(f){o&&E(`Failed to load ${u} ${f.message}`),n=f}let s=__Process$.env;return e&&e.processEnv!=null&&(s=e.processEnv),l.populate(s,a,e),n?{parsed:a,error:n}:{parsed:a}}function M(e){if(N(e).length===0)return l.configDotenv(e);let r=V(e);return r?l._configVault(e):(P(`You set DOTENV_KEY but you are missing a .env.vault file at ${r}. Did you forget to build it?`),l.configDotenv(e))}function j(e,r){let t=__Buffer$.from(r.slice(-64),"hex"),o=__Buffer$.from(e,"base64"),c=o.subarray(0,12),n=o.subarray(-16);o=o.subarray(12,-16);try{let a=Y.createDecipheriv("aes-256-gcm",t,c);return a.setAuthTag(n),`${a.update(o)}${a.final()}`}catch(a){let s=a instanceof RangeError,u=a.message==="Invalid key length",f=a.message==="Unsupported state or unable to authenticate data";if(s||u){let d=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw d.code="INVALID_DOTENV_KEY",d}else if(f){let d=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw d.code="DECRYPTION_FAILED",d}else throw a}}function C(e,r,t={}){let o=!!(t&&t.debug),c=!!(t&&t.override);if(typeof r!="object"){let n=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw n.code="OBJECT_REQUIRED",n}for(let n of Object.keys(r))Object.prototype.hasOwnProperty.call(e,n)?(c===!0&&(e[n]=r[n]),o&&E(c===!0?`"${n}" is already defined and WAS overwritten`:`"${n}" is already defined and was NOT overwritten`)):e[n]=r[n]}var l={configDotenv:F,_configVault:B,_parseVault:U,config:M,decrypt:j,parse:R,populate:C};i.exports.configDotenv=l.configDotenv;i.exports._configVault=l._configVault;i.exports._parseVault=l._parseVault;i.exports.config=l.config;i.exports.decrypt=l.decrypt;i.exports.parse=l.parse;i.exports.populate=l.populate;i.exports=l});var g=x(m()),{configDotenv:G,_configVault:J,_parseVault:Q,config:H,decrypt:z,parse:X,populate:Z}=g,ee=g.default??g;export{J as _configVault,Q as _parseVault,H as config,G as configDotenv,z as decrypt,ee as default,X as parse,Z as populate};
//# sourceMappingURL=dotenv.mjs.map