import { z } from "zod";
import { RankSchema } from "./rank.js";
import { match } from "ts-pattern";
import { PlayerConfig, PlayerConfigEntrySchema } from "./playerConfig.js";
import { filter, flatMap } from "remeda";

export type QueueType = z.infer<typeof QueueTypeSchema>;
export const QueueTypeSchema = z.enum([
  "ranked solo",
  "ranked flex",
  "aram",
  "arurf",
  "urf",
  "quickplay",
  "swiftplay",
  "arena",
  "brawl",
  "draft pick",
  "doom bots",
  "custom",
]);

// from https://static.developer.riotgames.com/docs/lol/queues.json
export function parseQueueType(input: number): QueueType | undefined {
  return match(input)
    .returnType<QueueType | undefined>()
    .with(0, () => "custom")
    .with(420, () => "ranked solo")
    .with(400, () => "draft pick")
    .with(440, () => "ranked flex")
    .with(450, () => "aram")
    .with(480, () => "swiftplay")
    .with(490, () => "quickplay")
    .with(900, () => "arurf")
    .with(1700, () => "arena")
    .with(2300, () => "brawl")
    .with(1900, () => "urf")
    .with(3130, () => "doom bots")
    .with(4220, () => "doom bots")
    .with(4250, () => "doom bots")
    .otherwise(() => {
      console.error(`unknown queue type: ${input.toString()}`);
      return undefined;
    });
}

export type LoadingScreenPlayer = z.infer<typeof LoadingScreenPlayerSchema>;
export const LoadingScreenPlayerSchema = z.strictObject({
  player: PlayerConfigEntrySchema,
  rank: RankSchema.optional(),
});

export type LoadingScreenState = z.infer<typeof LoadingScreenStateSchema>;
export const LoadingScreenStateSchema = z.strictObject({
  // a way to uniquely identify this entry
  // generated by the application
  uuid: z.string(),
  // the time that this was added to the state
  added: z.string().pipe(z.coerce.date()),
  // the match id from the Riot API
  matchId: z.number(),
  queue: QueueTypeSchema.optional(),
  players: z.array(LoadingScreenPlayerSchema).nonempty(),
});

export type ApplicationState = z.infer<typeof ApplicationStateSchema>;
export const ApplicationStateSchema = z.strictObject({
  gamesStarted: z.array(LoadingScreenStateSchema),
});

export function getPlayersInGame(
  players: PlayerConfig,
  state: ApplicationState
) {
  const playersInGame = flatMap(state.gamesStarted, (game) => game.players);
  return filter(players, (player) =>
    playersInGame.some(
      (matchPlayer) =>
        matchPlayer.player.league.leagueAccount.puuid ===
        player.league.leagueAccount.puuid
    )
  );
}

export function getPlayersNotInGame(
  players: PlayerConfig,
  state: ApplicationState
) {
  const playersInGame = flatMap(state.gamesStarted, (game) => game.players);
  return filter(
    players,
    (player) =>
      !playersInGame.some(
        (matchPlayer) =>
          matchPlayer.player.league.leagueAccount.puuid ===
          player.league.leagueAccount.puuid
      )
  );
}
